{"version":3,"sources":["src/components/Meta.tsx","src/components/ApproveButton.tsx","src/screens/SHTStakeScreen.tsx"],"names":["Meta","props","useColors","textMedium","textLight","placeholder","onPress","useLinker","url","text","disabled","suffix","style","justifyContent","marginTop","note","IS_DESKTOP","fontWeight","color","label","undefined","textDecorationLine","ApproveButton","t","useTranslation","approveToken","useContext","EthersContext","useState","loading","setLoading","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","View","Button","title","symbol","containerStyle","marginBottom","Spacing","tiny","Staking","state","useSTStakingState","large","Border","stoken","yourTotalSToken","isZero","Notice","small","STokenBalance","yourFreeToSendSToken","yourSTokenStaked","stokenAllowed","textDark","Text","fontSize","formatBalance","decimals","AmountInput","Heading","TokenInput","amount","onAmountChanged","setAmount","autoFocus","StakeInfo","isEmptyValue","powerPrice","ethers","FixedNumber","from","divUnsafe","powerPerHashUnitDay","mulUnsafe","dailyBTCYeild","btcPrice","dailyBTCNetrewardPerHashUnit","subUnsafe","dailyReward","alreadyReward","suppose","addUnsafe","dailyRewardTotal","fromString","totalSTokenSupply","share","parseBalance","add","round","InfoBox","normal","toString","Controls","error","setError","gt","InsufficientBalanceButton","FetchingButton","BTCSTFarm","setSTokenAllowed","message","code","ErrorMessage","StakeButton","entering","onEnter","console","log","SHTStakeScreen","Screen","Container","BackgroundImage","Content","Title","light","Platform","OS","WebFooter"],"mappings":"wFAAA,8DA0CeA,IA1Ba,SAAAC,GAAU,IAAD,EACcC,cAAvCC,EADyB,EACzBA,WAAYC,EADa,EACbA,UAAWC,EADE,EACFA,YACzBC,EAAUC,YAAUN,EAAMO,KAAO,GAAI,GAAI,UACzCC,EAAOR,EAAMS,SACb,MACAT,EAAMQ,KACNR,EAAMQ,MAAQR,EAAMU,OAAS,IAAMV,EAAMU,OAAS,IAClD,iBACN,OACI,kBAAC,IAAD,CAAUC,MAAO,CAAEC,eAAgB,gBAAiBC,UAAW,IAC3D,kBAAC,IAAD,CAAMC,MAAOC,IAAYC,WAAY,OAAQL,MAAO,CAAEM,MAAOjB,EAAMS,SAAWL,EAAcF,IACvFF,EAAMkB,OAEX,kBAAC,IAAD,CACIJ,MAAOC,IACPV,QAASL,EAAMO,IAAMF,OAAUc,EAC/BR,MAAO,CACHM,MAAOjB,EAAMS,SAAWL,EAAcJ,EAAMQ,KAAON,EAAaC,EAChEiB,mBAAoBpB,EAAMO,IAAM,YAAc,SAEjDC,M,8ICaFa,EAhC+B,SAAArB,GAAU,IAAD,EAC7CsB,EAAIC,cACFC,EAAiBC,qBAAWC,KAA5BF,aAF2C,EAGrBG,oBAAS,GAHY,WAG5CC,EAH4C,KAGnCC,EAHmC,KAI7CxB,EAAUyB,uBAAY,0BAAAC,EAAAC,OAAA,oDACpBhC,EAAMiC,MADc,wBAEpBjC,EAAMkC,QAAQ,IACdL,GAAW,GAHS,oBAAAE,EAAA,MAKCP,EAAaxB,EAAMiC,MAAME,QAASnC,EAAMoC,UALzC,YAKVC,EALU,4CAAAN,EAAA,MAONM,EAAGC,QAPG,QAQZtC,EAAMuC,YARM,0DAWhBvC,EAAMkC,QAAN,MAXgB,yBAahBL,GAAW,GAbK,sFAgBzB,CAAC7B,EAAMiC,QACV,OAAIjC,EAAMwC,OAAe,kBAACC,EAAA,EAAD,MAErB,kBAACC,EAAA,EAAD,CACIC,MAAOrB,EAAE,WAAa,MAAO,SAAAtB,EAAMiC,YAAN,IAAaW,SAAU,IACpDvC,QAASA,EACTuB,QAASA,EACTiB,eAAgB,CAAEC,aAAcC,IAAQC,S,8MCS9CC,EAAU,WAAO,IAAD,EACZ3B,EAAIC,cACJ2B,EAAQC,cACd,OACI,kBAACV,EAAA,EAAD,CAAM9B,MAAO,CAAEE,UAAWkC,IAAQK,QAC9B,kBAAC,EAAD,CAAeF,MAAOA,IACtB,kBAACG,EAAA,EAAD,MACA,kBAAC,EAAD,CAAaH,MAAOA,IACnBA,EAAMI,SAAN,SAAgBJ,EAAMK,sBAAtB,EAAgB,EAAuBC,WACpC,kBAACC,EAAA,EAAD,CAAQjD,KAAMc,EAAE,uBAAwBL,MAAO,SAAUN,MAAO,CAAEE,UAAWkC,IAAQW,SAEzF,kBAAC,EAAD,CAAWR,MAAOA,MAKxBS,EAAgB,SAAC,GAAwC,IAAtCT,EAAqC,EAArCA,MACf5B,EAAIC,cACHK,EAA+EsB,EAA/EtB,QAAQ2B,EAAuEL,EAAvEK,gBAAgBK,EAAuDV,EAAvDU,qBAAqBC,EAAkCX,EAAlCW,iBAFM,GAE4BX,EAAjBY,cACxB7D,eAArC8D,EAHkD,EAGlDA,SAAU5D,EAHwC,EAGxCA,UAHwC,EAG7BC,YAC7B,OACI,kBAACqC,EAAA,EAAD,KAEI,kBAACuB,EAAA,EAAD,CACIrD,MAAO,CACHsD,SAAUlD,IAAa,GAAK,GAC5B+B,aAAcC,IAAQC,KACtB/B,MAAOW,EAASzB,EAAY4D,KAE/BnC,GAAYsB,EAAMI,QAAWC,EACzBjC,EAAE,YAAY,IAAI4C,YAAcX,EAAiBL,EAAMI,OAAOa,UAAU,SAD9B7C,EAAE,aAIrD,kBAAC0C,EAAA,EAAD,CACIrD,MAAO,CACHsD,SAAUlD,IAAa,GAAK,GAC5B+B,aAAcC,IAAQC,KACtB/B,MAAOW,EAASzB,EAAY4D,KAE/BnC,GAAYsB,EAAMI,QAAWC,EAC7BjC,EAAE,gBAAgB4C,YAAcN,EAAsBV,EAAMI,OAAOa,UAAU,IAC7E7C,EAAE,kBAAkB4C,YAAcL,EAAkBX,EAAMI,OAAOa,UAFnB,MAQzDC,EAAc,SAAC,GAAwC,IAAtClB,EAAqC,EAArCA,MACb5B,EAAIC,cACV,OAAK2B,EAAMI,QAAUJ,EAAMK,gBAAgBC,SAChC,kBAACa,EAAA,EAAD,CAAS7D,KAAMc,EAAE,mBAAoBb,UAAU,IAGtD,kBAACgC,EAAA,EAAD,KACI,kBAAC4B,EAAA,EAAD,CAAS7D,KAAMc,EAAE,qBACjB,kBAACgD,EAAA,EAAD,CACIrC,MAAOiB,EAAMI,OACbiB,OAAQrB,EAAMqB,OACdC,gBAAiBtB,EAAMuB,UACvBC,UAAW3D,QAOrB4D,EAAY,SAAC,GAAwC,IAAtCzB,EAAqC,EAArCA,MACX5B,EAAIC,cAD4C,EAETtB,cAA3BE,GAFoC,EAE9C4D,SAF8C,EAEpC5D,WAAWC,EAFyB,EAEzBA,YACvBK,GACDyC,EAAMI,QACPJ,EAAMK,gBAAgBC,WACrBN,EAAMW,kBACPe,YAAa1B,EAAMqB,QAEjBM,EAAaC,SAAOC,YAAYC,KAAK,IAAIC,UAAUH,SAAOC,YAAYC,KAAK,MAC3EE,EAAsBJ,SAAOC,YAAYC,KAAK,IAAIG,UAAUL,SAAOC,YAAYC,KAAK,KACpFI,EAAgBN,SAAOC,YAAYC,KAAK,KAAKC,UAAUH,SAAOC,YAAYC,KAAK,MAC/EK,EAAWP,SAAOC,YAAYC,KAAK,OACnCM,EAA+BF,EAAcG,UAC/CL,EAAoBC,UAAUN,GAAYI,UAAUI,IAElDG,EAAc/E,OACdU,EACA2D,SAAOC,YAAYC,KAAK9B,EAAMqB,QACzBY,UAAUG,GACVL,UAAUH,SAAOC,YAAYC,KAAK,KACvCS,EAAgBhF,OAChBU,EACA2D,SAAOC,YAAYC,KAAKd,YAAchB,EAAMW,iBAAiBX,EAAMI,OAAQa,WACxEgB,UAAUG,GACVL,UAAUH,SAAOC,YAAYC,KAAK,KACrCU,EAAUjF,GAAQ,MAAY+E,OAAVrE,EAAUqE,EAAaG,UAAUF,GAGrDG,EAAmBnF,OAAWU,EAC5B2D,SAAOC,YAAYc,WAAW3B,YAAchB,EAAM4C,kBAAkB5C,EAAMI,OAAQa,WACjFc,UAAUH,SAAOC,YAAYC,KAAK,KAAKG,UAAUG,GAKpDS,GAJetF,GACGuF,YAAa9C,EAAMqB,OAAQrB,EAAMI,OAAQa,UACxC8B,IAAI/C,EAAMW,kBAErBpD,OACRU,EACAuE,EAAST,UAAUW,GAAmBT,UAAUL,SAAOC,YAAYC,KAAK,MAAMkB,MAAM,IAC1F,OACI,kBAACC,EAAA,EAAD,KAMI,kBAACnC,EAAA,EAAD,CACArD,MAAO,CACHsD,SAAUlD,IAAa,GAAK,GAC5B+B,aAAcC,IAAQqD,OACtBnF,MAAOR,EAAWL,EAAcD,IAExBmB,EAAXb,EAAa,MAAW,mBAEzB,kBAACV,EAAA,EAAD,CAAMmB,MAAOI,EAAE,eAAgBd,KAAMuF,EAAOrF,OAAQ,IAAKD,SAAUA,IACnE,kBAACV,EAAA,EAAD,CAAMmB,MAAOI,EAAE,qBAAsBd,KAAMkF,EAAUA,EAAQQ,MAAM,GAAGG,WAAa,GAAI5F,SAAUA,IACjG,kBAAC,EAAD,CAAUyC,MAAOA,MAKvBoD,EAAW,SAAC,GAAwC,IAAtCpD,EAAqC,EAArCA,MAAqC,EAC3BvB,mBAAwB,IADG,WAC9C4E,EAD8C,KACvCC,EADuC,KAErD,OACI,kBAAC/D,EAAA,EAAD,CAAM9B,MAAO,CAAEE,UAAWkC,IAAQqD,UAC5BlD,EAAMI,QAAUJ,EAAMK,gBAAgBC,UAAYoB,YAAa1B,EAAMqB,QACnE,kBAAC,EAAD,CAAarB,MAAOA,EAAOhB,QAASsE,EAAU/F,UAAU,IACxDuF,YAAa9C,EAAMqB,OAAQrB,EAAMI,OAAOa,UAAUsC,GAAGvD,EAAMK,iBAC3D,kBAACmD,EAAA,EAAD,CAA2B9D,OAAQM,EAAMI,OAAOV,SAChDM,EAAMtB,QACN,kBAAC+E,EAAA,EAAD,MAEA,oCACI,kBAAC,EAAD,CACI1E,MAAOiB,EAAMI,OACblB,QAASwE,IACTrE,UAAW,kBAAMW,EAAM2D,kBAAiB,IACxC3E,QAASsE,EACThE,OAAQU,EAAMY,gBAElB,kBAAC,EAAD,CAAaZ,MAAOA,EAAOhB,QAASsE,EAAU/F,UAAWyC,EAAMY,iBAGtEyC,EAAMO,SAA0B,OAAfP,EAAMQ,MAAiB,kBAACC,EAAA,EAAD,CAAcT,MAAOA,MAKpEU,EAAc,SAAC,GAQd,IAPH/D,EAOE,EAPFA,MACAhB,EAME,EANFA,QACAzB,EAKE,EALFA,SAMMa,EAAIC,cAWV,OAAO,kBAACmB,EAAA,EAAD,CAAQC,MAAOrB,EAAE,SAAUM,QAASsB,EAAMgE,SAAU7G,QAV3C,oBAAA0B,EAAAC,OAAA,uDACZE,EAAQ,IADI,oBAAAH,EAAA,MAGFmB,EAAMiE,WAHJ,OAIRjE,EAAMuB,UAAU,IAJR,gDAMRvC,EAAQ,EAAD,IACPkF,QAAQC,IAAR,MAPQ,iEAU6D5G,SAAUA,KAG5E6G,UArMQ,WACnB,IAAMhG,EAAIC,cACV,OACI,kBAACgG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOnH,KAAMc,EAAE,WACf,kBAAC0C,EAAA,EAAD,CAAM4D,OAAO,GAAOtG,EAAE,eAGtB,kBAAC,EAAD,OAEa,QAAhBuG,IAASC,IAAgB,kBAACC,EAAA,EAAD,OAE9B,kBAAC,IAAD","file":"static/js/11.44f17bfa.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetchingâ€¦\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve\") + \" \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useSTStakingState, { StakingState } from \"../hooks/useSTStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\nimport useColors from \"../hooks/useColors\";\nimport { ethers } from \"ethers\";\n\nconst SHTStakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")\n                    // +t(\"or\")+\" \"+t(\"just-send-to-address\")+\" \"+BTCSTFarm\n                                    }</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useSTStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <STokenBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.stoken && state.yourTotalSToken?.isZero() && (\n                <Notice text={t(\"you-dont-have-btcst\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst STokenBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const {loading,yourTotalSToken,yourFreeToSendSToken,yourSTokenStaked,stokenAllowed} = state;\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <View>\n            {/* <Heading text={t(\"your-BTCTS\")} /> */}\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 28 : 20,\n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.stoken || !yourTotalSToken? t(\"fetching\")\n                    :t(\"you-have\")+\" \"+formatBalance(yourTotalSToken, state.stoken.decimals)+\" BTCST\"\n                    }\n            </Text>\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 14 : 10,                    \n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.stoken || !yourTotalSToken? \"\"\n                :t(\"free-to-send\")+formatBalance(yourFreeToSendSToken, state.stoken.decimals)+\" \"\n                +t(\"staked-in-pool\")+formatBalance(yourSTokenStaked, state.stoken.decimals)}\n            </Text>\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.stoken || state.yourTotalSToken.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    const disabled =\n        !state.stoken ||\n        state.yourTotalSToken.isZero() ||\n        !state.yourSTokenStaked ||\n        isEmptyValue(state.amount);\n        \n    const powerPrice = ethers.FixedNumber.from(58).divUnsafe(ethers.FixedNumber.from(1000*1000));\n    const powerPerHashUnitDay = ethers.FixedNumber.from(60).mulUnsafe(ethers.FixedNumber.from(24));\n    const dailyBTCYeild = ethers.FixedNumber.from(711).divUnsafe(ethers.FixedNumber.from(100000000));\n    const btcPrice = ethers.FixedNumber.from(22715);\n    const dailyBTCNetrewardPerHashUnit = dailyBTCYeild.subUnsafe(\n        powerPerHashUnitDay.mulUnsafe(powerPrice).divUnsafe(btcPrice));\n    \n    const dailyReward = disabled\n        ? undefined\n        : ethers.FixedNumber.from(state.amount)\n              .mulUnsafe(dailyBTCNetrewardPerHashUnit)\n              .divUnsafe(ethers.FixedNumber.from(10));\n    const alreadyReward = disabled\n        ? undefined\n        : ethers.FixedNumber.from(formatBalance(state.yourSTokenStaked,state.stoken!.decimals))\n            .mulUnsafe(dailyBTCNetrewardPerHashUnit)\n            .divUnsafe(ethers.FixedNumber.from(10));\n    const suppose = disabled? undefined:dailyReward?.addUnsafe(alreadyReward!);\n    // console.log(dailyReward?.toString()+\" dailyReward\");\n\n    const dailyRewardTotal = disabled ? undefined : \n            ethers.FixedNumber.fromString(formatBalance(state.totalSTokenSupply,state.stoken!.decimals))\n            .divUnsafe(ethers.FixedNumber.from(10)).mulUnsafe(dailyBTCNetrewardPerHashUnit);\n    const stoenBalance = disabled ? undefined : \n                            parseBalance(state.amount, state.stoken!.decimals)\n                            .add(state.yourSTokenStaked!);\n\n    const share = disabled\n        ? undefined\n        : suppose!.divUnsafe(dailyRewardTotal!).mulUnsafe(ethers.FixedNumber.from(100)).round(6);\n    return (\n        <InfoBox>\n            {/* <AmountMeta\n                amount={suppose ? suppose.round(8).toString() : \"\"}\n                suffix={t(\"btcb-estimated\")}\n                disabled={disabled}\n            /> */}\n            <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: disabled ? placeholder : textLight\n            }}>\n            {disabled ? t(\"n/a\") : t(\"btcb-estimated\")}\n            </Text>\n            <Meta label={t(\"daily-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"your-daily-reward\")} text={suppose ? suppose.round(8).toString() : \"\"} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.stoken || state.yourTotalSToken.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.stoken.decimals).gt(state.yourTotalSToken) ? (\n                <InsufficientBalanceButton symbol={state.stoken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.stoken}\n                        spender={BTCSTFarm}\n                        onSuccess={() => state.setSTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.stokenAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.stokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n            console.log(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default SHTStakeScreen;\n"],"sourceRoot":""}